def podziel_paczki(wagi, max_waga):
    wagi_sort = sorted(wagi, reverse= True)
    kursy = []

    #sprawdzenie czy apczka nie przekracza wartosci max
    for waga in wagi:
        if waga > max_waga:
            raise ValueError(f"Paczka o wadze {waga} przekracza maksymalną wagę kursu {max_waga} kg.")

    #iterowanie po dostępnych paczkach
    for waga in wagi_sort:
        dodano = False
        #szukanie kursu do którego można dodać paczke
        for kurs in kursy:
            if sum(kurs) + waga <= max_waga:
                kurs.append(waga)
                dodano = True
                break
        #jeżeli nie można dodać paczki do żadnego kursu utwórz nowy kurs
        if not dodano:
            kursy.append([waga])

    return len(kursy), kursy

if __name__ == "__main__":
    wagi = [10,15,7,20,5,8,10]
    max_waga = 25
    liczba_kursow, kursy = podziel_paczki(wagi, max_waga)
    print(f"Liczba kursów: {liczba_kursow}")
    for i, kurs in enumerate(kursy,1):
        print(f"Kurs {i}: {kurs} - suma wag: {sum(kurs)} kg.")



from collections import deque


def bfs_shortest_path(graph, start, end):

    queue= deque([start]) #struktura do przechowywania ścieżki do przechowywania ściezki
    visited = set()

    while queue:
        path = queue.popleft()
        node = path[-1]
        if node == end:
            return path

        if node not in visited:
            for neighbor in graph.get(node, []):
                new_path = list (path)
                new_path.append(neighbor)
                queue.append(new_path)
            visited.add(node)

    return None


graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['A'],
    'E': ['B', 'F'],
    'F': ['C', 'F']
}

print(bfs_shortest_path(graph, 'A', 'F'))
